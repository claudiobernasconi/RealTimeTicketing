@page "/tickets"
@using Microsoft.AspNetCore.SignalR.Client
@using RealTimeTicketing.Client.Tickets

@inject NavigationManager Navigation
@inject HttpClient HttpClient

<h3>Tickets</h3>

@if (_tickets is not null)
{
    <table>
        <thead>
            <tr>
                <th style="width: 100px;">Ticket Id</th>
                <th style="width: 300px;">Title</th>
                <th style="width: 100px;">Created</th>
                <th style="width: 200px;">State</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticket in _tickets)
            {
                <tr>
                    <td>@ticket.TicketId</td>
                    <td>@ticket.Title</td>
                    <td>@ticket.Created.ToShortDateString()</td>
                    <td>
                        <select class="form-select"
                                @onchange="e => UpdateTicket(ticket.TicketId, e.Value?.ToString())">
                            @foreach (var state in _ticketStates)
                            {
                                <option value="@state"
                                        selected="@(state == ticket.State)">
                                    @state
                                </option>
                            }
                        </select>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private HubConnection? _hubConnection;
    private IEnumerable<Ticket>? _tickets;
    private List<TicketState> _ticketStates = Enum.GetValues<TicketState>().ToList();

    protected override async Task OnInitializedAsync()
    {
        if (HttpClient.BaseAddress is not null)
        {
            _tickets = await HttpClient.GetFromJsonAsync<IEnumerable<Ticket>>("api/tickets");
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/ticketHub"))
            .Build();

        _hubConnection.On<TicketUpdate>("ReceiveTicketUpdate", (TicketUpdate ticket) =>
        {
            if (_tickets is not null)
            {
                _tickets.Single(t => t.TicketId == ticket.TicketId).State = ticket.State;
            }
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    private async Task UpdateTicket(int ticketId, string? ticketState)
    {
        Enum.TryParse<TicketState>(ticketState, out var state);
        if (_hubConnection is not null && _hubConnection.State == HubConnectionState.Connected)
        {
            await _hubConnection.SendAsync("UpdateTicket", new TicketUpdate(ticketId, state));
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
